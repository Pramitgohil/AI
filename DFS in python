#PYTHON CODE 
 # DFS implementation for a simple graph 


def dfs(graph, node, visited, traversal_order): 
    # Mark the node as visited 
    visited.add(node) 
    traversal_order.append(node)  # Record the node in traversal order 
 
    # Visit all the neighbors of the current node 
    for neighbor in graph[node]: 
        if neighbor not in visited: 
            dfs(graph, neighbor, visited, traversal_order) 
 
# Example graph represented as an adjacency list 
graph = { 
    'A': ['B', 'C'], 
    'B': ['A', 'D', 'E'], 
    'C': ['A', 'F'], 
    'D': ['B'], 
    'E': ['B', 'F'], 
    'F': ['C', 'E'] 
} 
 
# Starting DFS from node 'A' 
visited = set() 
traversal_order = [] 
dfs(graph, 'A', visited, traversal_order) 
# Print the traversal order 
print("DFS Traversal Order:", traversal_order)





